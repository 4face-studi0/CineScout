import entities.IntId;
import entities.TmdbId;
import entities.Name;
import kotlin.UInt;

CREATE TABLE IF NOT EXISTS movie (
  id INTEGER as IntId NOT NULL PRIMARY KEY AUTOINCREMENT,
  tmdbId INTEGER as TmdbId NOT NULL,
  title TEXT as Name NOT NULL,
  year INTEGER as UInt NOT NULL
);

CREATE UNIQUE INDEX IF NOT EXISTS movie_tmdbId ON movie(tmdbId);
CREATE INDEX IF NOT EXISTS movie_title ON movie(title);

insert:
  INSERT
  INTO movie(tmdbId, title, year)
  VALUES(?, ?, ?);

update:
  UPDATE movie
  SET title = ?, year = ?
  WHERE tmdbId = ?;

selectIdByTmdbId:
  SELECT id
  FROM movie
  WHERE tmdbId = ?
  LIMIT 1;

CREATE VIEW IF NOT EXISTS movieDetails AS
SELECT
  movie.id,
  movie.tmdbId,
  title,
  year,
  actor.tmdbId actorTmdbId,
  actor.name actorName,
  genre.tmdbId genreTmdbId,
  genre.name genreName
FROM movie
JOIN movie_actor ON movie.id = movie_actor.movieId
JOIN movie_genre ON movie.id = movie_genre.movieId
JOIN actor ON movie_actor.actorId = actor.id
JOIN genre ON movie_genre.genreId = genre.id;

CREATE VIEW IF NOT EXISTS movieDetailsWithRating AS
SELECT
  movieDetails.id,
  tmdbId,
  title,
  year,
  actorTmdbId,
  actorName,
  genreTmdbId,
  genreName,
  rating
FROM movieDetails
JOIN stat ON stat.statId = movieDetails.id AND stat.type = "movie";

selectAllRated:
  SELECT *
  FROM movieDetailsWithRating
  ORDER BY rating DESC;

selectTopRated:
  SELECT *
  FROM movieDetailsWithRating
  ORDER BY rating DESC
  LIMIT ?;

deleteAll:
  DELETE FROM stat;
